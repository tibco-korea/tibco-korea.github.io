MyModel <- readRDS("~/Tibco/09.데이타셋/titanic/MyModel.rds")
MyModel
install.packages(c("backports", "bookdown", "broom", "callr", "cli", "clipr", "codetools", "colorspace", "covr", "data.table", "dbplyr", "devtools", "digest", "dplyr", "DT", "e1071", "fs", "generics", "ggplot2", "glue", "googleVis", "gplots", "htmltools", "htmlwidgets", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "lubridate", "magick", "magrittr", "MASS", "matrixStats", "mgcv", "mnormt", "nlme", "openssl", "pillar", "pkgbuild", "processx", "ps", "psych", "R6", "Rcpp", "RcppArmadillo", "readr", "remotes", "rlang", "rmarkdown", "roxygen2", "rpart.plot", "rprojroot", "RSQLite", "rstudioapi", "rvest", "stringi", "survival", "sys", "testthat", "tibble", "tidyr", "tinytex", "usethis", "vctrs", "withr", "xfun", "xgboost"))
getwd()
setwd(/Users/dangtongbyun)
setwd("/Users/dangtongbyun")
getwd()
help(mean)
x1 <- 13
class(x1)
str(x1)
x2 <- 12.3
class(x2)
str(x2)
x3 <- 56
class(x3)
x3 <- 56L
class(x3)
x3 <- 56I
x3 <- 56i
class(x3)
getwd()
getwd()
x1 <- 13
class(x1)
str(x1)
view(x1)
View(x1)
VIEW(x1)
view(x1)
View(x1)
x1 <- "hellow world"
class(x1)
library(lubridate)
install.packages(lubridate)
install.packages("lubridate")
install.packages("lubridate")
today()
library(lubridate)
today()
now()
ymd("2017-01-31")
library(lubridate)
today*()
today()
now()
ymd("2017-01-31")
str(a)
a <- ymd("2017-01-31")
str(a)
mdy("january 31st, 2017")
(mdy("january 31st, 2017"))
(mdy("january 31st, 2017"))
mdy(01102020)
dmy("31-Jan-2017")
ymd(20170131)
ymd_hms("2020-10-11 12:32:13")
(ymd_hms("2020-10-11 12:32:13"))
(ymd(20171031, tz = "UTC"))
(ymd(20171031, tz = "KST"))
(ymd(20171031, tz = "kr"))
(ymd(20171031, tz = "Asia/Seoul"))
ymd(20171031, tz = "Asia/Seoul")
ymd(20171031, tz = "Asia/Seoul")
a <- ymd(20171031, tz = "Asia/Seoul")
(a <- ymd(20171031, tz = "Asia/Seoul"))
z <- c(1,NA,0/0,1/0)
z
is.na(z)
is.nan(z)
is.finite(z)
is.infinite(z)
x <- c(1,2,NA, NaN)
mean(x)
mean(x, na.rm = TRUE)
v1 <- c(10,20,30,40)
(v1 <- c(10,20,30,40))
names(v1) <- c("math", "science","age","height")
v1
v1[1:2]
v1["age"]
v1[-2]
v1[2]
nrow(v1)
NROW(v1)
v2 <- c(100,200,300,400)
identical((v1,v2))
identical(v1,v2)
"math" %in% v1
v1
10 %in% v1
10 %in% v1
y = x*3
y
y = x*3
x <- c(1,2,3,4,5)
y = x*3
y
u <- c(10,20,30,40,50)
u <- c(5,20,30,40,50)
intersect(x,u)
union(x,u)
setdiff(x,u)
x <- seq(1,10)
x
xx <- seq(1,10,2)
xx
y <- seq_along(x)
y
x <- c(1,2,3,4,5,6)
y <- seq_along(x)
y
x <- c(100,2,3,4,5,6)
y <- seq_along(x)
y
z <- 1:NROW(x)
z
x <- rep(1:4, each-2)
x
x <- rep(1:4, each=2)
x
x <- rep(1:4, times=5)
x
x <- rep(1:4, eaceh=2, times=5)
x
x <- rep(1:4, eaceh=2, times=5)
x <- rep(1:4, eaceh=2, times=5)
x
x <- rep(1:4, each=2, times=5)
x
#문제1. 1부터 20까지 벡터를 만들고 출력 하고 v1에 저장 하세요
v1 <- c(1:20);v1
v2 <- 1:20; v2
#문제2. v1의 5번째 항목 부터 10번째 항목을 출력 하세요
v1[5:10]
#문제3. v1 벡터의 9번째 항목부터 13번째 항목을 빼고 출력 하세요
v1[-9:-13]
x <- list(name="foo", height=170)
x
x <- list(name="foo", score=("A","B","A+"))
x <- list(name="foo", score=c("A","B","A+"))
x
x <- list(a=list(val=c(1,2,3)), b=list(val=c(1,2,3,4)))
x
x$a
x$a$val
x$a$val[1]
x[1]
x[[1]]
matrix(c(1:9), nrow=3)
matrix(c(1:10), nrow=3)
matrix(c(1:9), ncol=3)
matrix(c(1:10), ncol=3)
matrix(c(1:9), nrow=3, byrow=TRUE)
matrix(1:9, nrow=3, dimnames = list(c("가", "나", "다"), c('A','B','C')))
a <- matrix(1:9, nrow=3, dimnames = list(c("가", "나", "다"), c('A','B','C')))
a
a['가','A']
a['가',]
a[,'A']
x <- matrix(1:9, ncol=3)
x
dimnames(x) <- list(c("가", "나", "다"), c('A','B','C')))
dimnames(x) <- list(c("가", "나", "다"), c('A','B','C'))
x
rownames(x)
colnames(x)
rownames(x) <- c("1","2","3")
x
a <- matrix(1:9, nrow=3, list(c("가", "나", "다"), c('A','B','C')))
#문제1. 6 x 4 행렬 A 를 만들고 1 과 4 사이의 숫자로만 채우고 출력하세요
a <- matrix(c(1:3), 4,6);a
#문제1. 6 x 4 행렬 A 를 만들고 1 과 4 사이의 숫자로만 채우고 출력하세요
a <- matrix(c(1:3), 6,4);a
#문제2. 6 X 2 행렬 B 를 만들고 10 과 13 사이의 숫자를 열 방향으로 채워서 출력하세요.
b <- matrix(c(10:13),6,4,byrow=TRUE);b
#문제3. A 행렬에 스칼라 4를 곱하고 다시 B 행렬을 곱해서 행렬 C를 만들어 출력 하세요.
(a*4) %*% b
(t(a)*4) %*% b
t(a)
t
t(a)
a
ID <- c("BMW","LEXUS","Tesla","Hyundai")
DISTANCE <- c(120000,1200,300000,124000)
df <- date.frame(ID,DISTANCE,SPEED,ORDER_YEAR)
df <- data.frame(ID,DISTANCE,SPEED,ORDER_YEAR)
ID <- c("BMW","LEXUS","Tesla","Hyundai")
DISTANCE <- c(120000,1200,300000,124000)
SPEED <- c(240,250,300,220)
ORDER_YEAR <- c(2010,2019,2008,2011)
df <- data.frame(ID,DISTANCE,SPEED,ORDER_YEAR)
df
df$ID
df$SPEED
df$tire <- (10,12,10,11)
df$tire <- c(10,12,10,11)
df
df$tire <- 20:23
df
df[1,2]
df[1,'SPEED']
df[1,]
df[,'tire']
df[-3,2]
df
df[,c('SPEED','tire')]
df[1:3,c('SPEED','tire')]
df[1:3,c('ID':'SPEED')]
df[1:3,'ID':'SPEED']
df[1:3,c('ID':'SPEED')]
df[1:3,c('ID':'SPEED')]
df[1:3,c('ID','SPEED')]
x <- c("a","b","c")
x
str(x)
class(x)
y <- as.factor(x)
y
x <- matrix(1:9, ncol=3)
as.data.frame(x)
x
as.data.frame(x)
md <- data.fram(matrix(1:9, ncol=3))
md <- data.frame(matrix(1:9, ncol=3))
md
as.factor(c("m","f"))
factor(c("m","f"), levels = c('m','f'))
#문제1. 5명의 학생으로 이루어진 학교에서 학생들의 신체 수치를 데이터 화 하기 위해
#      id, name, age, height, weight, sex 를 속성으로 studentList 라는 이름의 리스트 데이터셋을 만들고 출력하세요.
#      데이터는 아래와 같습니다.
id <- c(1,2,3,4,5)
name <- c('john','bob','tera','jane','jim')
age <- c(18,18,18,18,18)
height <- c(183,176,170,180,172)
weight <- c(88,66,77,60,88)
sex <- c('M','F','M','F','M')
weight <- c(88,66,77,60,88)
sex <- c('M','F','M','F','M')
studentList <- list(ID=id,NAME=name,AGE=age,HEIGHT=height, WEIGHT=weight, SEX=sex)
studentLIst
studentList
# 문제2. studentList 를 studentFrame 라는 이름의 데이터프레임으로 변환 및 출력 하세요
studentFrame <- as.data.frame(studentList)
VIEW(studentFrame)
View(studentFrame)
# 문제3. studentFrame 에서 학생들의 ID, 키, 몸무게 만 뽑아서 studentMatrix 라는 이름의 행열로 전환 하세요
studentMatrix <- as.matrix(studentFrame[c(1,4,5)])
studentMatrix
# 문제4. studentMatrix 행렬의 전치(Transepose) 행열을 만드세요.
t(studentMatrix)
# 문제5. studentFrame 의 NAME 열의 속성이 팩터형 인지 확인하세요. studentFrame 의 NAME 열을 출력 해보세요.
is.factor(studentFrame$NAME)
#문제6. 리스트 studentList를 데이터 프레임 studentFrame 으로 변환 시 NAME 필드가 팩터형이 아닌 문자형으로
#       유지하게 변환하고, NAME 필드가 팩터형인지 확인 해보세요
studentFrame <- as.data.frame(studentList,stringsAsFactors = FALSE)
is.factor(studentFrame$NAME)
if(3<10){
print("TRUE")
print("3 is less than 10")
} else {
print("FALAS")
print("what?")
}
x <- c(10,11,12,13,14)
x <- c(10:14)
x <- c(10:14)
ifelse (x %% 2 == 0, "짝수", "홀수")
for(i in 1:4){
if(i==1) {print('one')}
else if(i==2) {print('two')}
else if(i==3) {print('three')}
else {print('four')}
}
x3 <- c(10,20,30,40,1)
for(i in x3){
if(i==1) {print('one')}
else if(i==2) {print('two')}
else if(i==3) {print('three')}
else {print('four')}
}
no <- c(1:4)
name <- c("김재진","구영후","김반장","지소윤")
pay <- c(110,150,80,210)
test_table <- data.frame(no,name,pay)
test_table
test_table$grade <- ifelse(test_table$pay >=200, "A",ifelse(test_table$pay >=100, "B", "c"))
test_table
print(i)
for( i in 1:10){
print(i)
}
i <- 0
while(i <-9){
i <- i+1
if(i %% 2 !=0){
next
}
print(i)
}
i <- 0
while(i <=9){
i <- i+1
if(i %% 2 !=0){
next
}
print(i)
}
i <- 1
repeat{
print(i)
if(i >= 10){
break
}
i <- i+1
}
x <- c(1,10,13,3)
x %% 2
x %/% 3
x >3
y <- c(3,5,2,1)
x > y
x1 | y1
x1 <- c(T,T,F,F)
x2 <- c(F,F,T,F)
x1 | y1
x1 <-  c(T,T,F,F)
x2 <-  c(F,F,T,F)
x1 | y1
y1 <-  c(F,F,T,F)
x1 | y1
X1 & y1
x1 & y1
x1 && y1
a <- 3.4
sqrt(a)
exp(a)
x1 <-  seq(-2,4, by=.5);
x1
floor(x1)
trunc(x1)
x <- c('john','Maria','keven','dangtong')
x <- c('john','Maria','keven','dangtong')
x
substr(x,1,2)
f <- function(x1,x2){
y <- x1^2 + 2^2
return(y)
}
f(1,3)
y <- x1^2 + x2^2
f <- function(x1,x2){
y <- x1^2 + x2^2
return(y)
}
f <- function(x1,x2){
y <- x1^2 + x2^2
return(y)
}
f(1,3)
func("a","b")
func <- function(...){
args <- list(...)
for(x in args){
print(x)
}
}
func("a","b")
func("a","b","c")
func("a","b","c",'d')
func <- function(x, y=10) {
return(x+y+z)
}
func(1,2)
df <- read_csv2("2017_4_2.csv")
col_list <- colnames(df)
colnames(df)
df <- read_csv2("2017_4_2.csv")
library(tidyverse)
setwd("/Users/dangtongbyun/Dropbox/00.Tibco/06.공유/국민대/공공자전거대여_데이터/2017_seoulBicycleUse")
df <- read_csv2("2017_4_2.csv")
col_list <- colnames(df)
colnames(df)
df2 <- read_csv2("2017_4_1.csv")
colnames(df2)
colnames(df2$이용시간.분.)
rename(df2, 이용시간.분. = 이용시간)
rename(df2, '이용시간.분.' = '이용시간(분)')
rename(df2, '이용시간(분)' = '이용시간.분.')
rename(df2, '이용시간(분)' = '이용시간.분.')
colnames(df2)
rename(df2, 이용시간(분) = 이용시간.분.)
rename(df2, '이용시간(분)' = '이용시간.분.')
df3 <- rename(df2, '이용시간(분)' = '이용시간.분.')
View(df3)
# 컬럼이름 바꾸로 csv 파일로 저장하기
library(tidyverse)
setwd("/Users/dangtongbyun/Dropbox/00.Tibco/06.공유/국민대/공공자전거대여_데이터/2017_seoulBicycleUse")
df2 <- read_csv2("2017_4_1.csv")
df2 <- rename(df2, '이용시간(분)' = '이용시간.분.')
write.csv2(df2,
paste0(getwd(),"/",'2017_4_1.csv') %>% str_replace_all(fixed(" "), ""),
row.names = FALSE)
df2 <- read_csv2("2017_4_1.csv")
View(df2)
View(df2)
df2 <- read_csv2("2017_4_1.csv")
df2 <- rename(df2, '이용거리(M)' = '이용거리.M.')
write.csv2(df2,
paste0(getwd(),"/",'2017_4_1.csv') %>% str_replace_all(fixed(" "), ""),
row.names = FALSE)
df2 <- read_csv2("2017_4_1.csv")
colnames(df2)
colnames(df2)
df2 <- read_csv2("2017_4_1.csv")
df2
colnames(df2)
col_list <- colnames(df2)
df2$col_list[1]
(df2$col_list)[1]
df2$col_list
# 컬럼이름 바꾸로 csv 파일로 저장하기
library(tidyverse)
setwd("/Users/dangtongbyun/Dropbox/00.Tibco/06.공유/국민대/공공자전거대여_데이터/2017_seoulBicycleUse")
df2 <- read_csv2("2017_4_1.csv")
colnames(df2)
df2 <- rename(df2, 'usedTime(min)' = '이용시간.분.')
df2 <- rename(df2, 'Distance(M)' = '이용거리.M.')
df2 <- rename(df2, 'usedTime(min)' = '이용시간(분)')
df2 <- rename(df2, 'Distance(M)' = '이용거리(M)')
write.csv2(df2,
paste0(getwd(),"/",'2017_4_1.csv') %>% str_replace_all(fixed(" "), ""),
row.names = FALSE)
library(tidyverse)
iris
View(iris)
setwd("/Users/dangtongbyun/Tibco/09.DataSet/LGChem/DataSet")
write.csv2("iris.csv")
write.csv2(iris, "iris.csv")
head(iris)
write.csv2(iris, sep=",","iris.csv")
write.csv2(iris, sep = ",", file="iris.csv", row.names = FALSE)
write.csv2(iris, quote = TRUE, sep = ",", file="iris.csv", row.names = FALSE)
write.csv2(iris, quote = TRUE, file="iris.csv", row.names = FALSE)
View(iris)
write.csv(iris, quote = TRUE, file="iris.csv", row.names = FALSE)
View(cars)
View(cars)
library(nycflights13)
flights
setwd("/Users/dangtongbyun/Tibco/09.DataSet/LGChem/DataSet")
write.csv(flights, quote = TRUE, file="flights.csv", row.names = FALSE)
airquality
library(tidyverse)
setwd("/Users/dangtongbyun/Tibco/09.DataSet/LGChem/DataSet")
library(tidyverse)
setwd("/Users/dangtongbyun/Tibco/09.DataSet/LGChem/DataSet")
olist_order <- read_csv(file='olist_orders_dataset.csv')
setwd("/Users/dangtongbyun/Dropbox/Acorn_Academy/dsWithR/_book/sfuserguide/dataSet")
olist_order <- read_csv(file='olist_orders_dataset.csv')
View(olist_order)
View(olist_order)
length(olist_order)
str(olist_order)
nrow(olist_order)
olist1 <- olist_order[1:33000,]
nrow(olist1)
olist2 <- olist_order[33001:66000,]
olist3 <- olist_order[66000:99441,]
write.csv2(olist1,
paste0(getwd(),"/","olist_orders1") %>% str_replace_all(fixed(" "), ""),
row.names = FALSE)
write.csv2(olist1,
paste0(getwd(),"/","olist_orders1.csv") %>% str_replace_all(fixed(" "), ""),
row.names = FALSE)
write.csv2(olist2,
paste0(getwd(),"/","olist_orders2.csv") %>% str_replace_all(fixed(" "), ""),
row.names = FALSE)
write.csv2(olist3,
paste0(getwd(),"/","olist_orders3.csv") %>% str_replace_all(fixed(" "), ""),
row.names = FALSE)
